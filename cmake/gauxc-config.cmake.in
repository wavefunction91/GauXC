cmake_minimum_required(VERSION 3.18 FATAL_ERROR) # Require CMake 3.18+

get_filename_component(GauXC_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

list(PREPEND CMAKE_MODULE_PATH ${GauXC_CMAKE_DIR}                      )
list(PREPEND CMAKE_MODULE_PATH ${GauXC_CMAKE_DIR}/linalg-cmake-modules )
include(CMakeFindDependencyMacro)

# Always Required Dependencies
find_dependency( ExchCXX )
find_dependency( IntegratorXX )

set( GAUXC_HAS_HOST       @GAUXC_HAS_HOST@      )
set( GAUXC_HAS_CUDA       @GAUXC_HAS_CUDA@      )
set( GAUXC_HAS_HIP        @GAUXC_HAS_HIP@       )
set( GAUXC_HAS_MAGMA      @GAUXC_HAS_MAGMA@     )
set( GAUXC_HAS_NCCL       @GAUXC_HAS_NCCL@      )
set( GAUXC_HAS_CUTLASS    @GAUXC_HAS_CUTLASS@   )
set( GAUXC_HAS_MPI        @GAUXC_HAS_MPI@       )
set( GAUXC_HAS_OPENMP     @GAUXC_HAS_OPENMP@    )
set( GAUXC_HAS_GAU2GRID   @GAUXC_HAS_GAU2GRID@  )
set( GAUXC_HAS_HDF5       @GAUXC_HAS_HDF5@      )
set( GAUXC_BLAS_IS_LP64   @GAUXC_BLAS_IS_LP64@  )

# Make sure C / CXX are enabled (former for BLAS discovery)
enable_language(C)
enable_language(CXX) 

if(GAUXC_HAS_OPENMP)
  find_dependency( OpenMP )
endif()

if( GAUXC_HAS_HOST )
  if(GAUXC_BLAS_IS_LP64)
    set( _blas_components lp64 )
  else()
    set( _blas_components ilp64 )
  endif()
  find_dependency( BLAS COMPONENTS "${_blas_components}")
  unset( _blas_components )
endif()

if( GAUXC_HAS_CUDA )
  enable_language( CUDA )
  find_dependency( CUDAToolkit @CUDAToolkit_VERSION@ EXACT )
  if( GAUXC_HAS_MAGMA )
    find_dependency( MAGMA )
  endif()
  if( GAUXC_HAS_NCCL )
    find_dependency( NCCL )
  endif()
endif()

if( GAUXC_HAS_HIP )
  enable_language( HIP )
  set (CMAKE_HIP_ARCHITECTURES @CMAKE_HIP_ARCHITECTURES@)
  set (ROCM_PATH @ROCM_PATH@)

  list (PREPEND CMAKE_PREFIX_PATH ${ROCM_PATH} ${ROCM_PATH}/hip ${ROCM_PATH}/hipblas)
  set(GPU_TARGETS "${CMAKE_HIP_ARCHITECTURES}" CACHE STRING "AMD GPU targets to compile for")

  find_package( hip REQUIRED )
  find_package( hipblas REQUIRED )

  list(REMOVE_AT CMAKE_PREFIX_PATH 0 1 2)
endif

if( GAUXC_HAS_MPI )
  find_dependency( MPI )
endif()

if( GAUXC_HAS_OPENMP )
  find_dependency( OpenMP )
endif()

if( GAUXC_HAS_HDF5 )
  find_dependency( HighFive )
endif()

list(REMOVE_AT CMAKE_MODULE_PATH 0)
list(REMOVE_AT CMAKE_MODULE_PATH 0)

if(NOT TARGET gauxc::gauxc)
    include("${GauXC_CMAKE_DIR}/gauxc-targets.cmake")
endif()

set(GauXC_LIBRARIES gauxc::gauxc)
